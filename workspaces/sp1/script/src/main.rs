use sp1_sdk::{ProverClient, SP1Stdin};
use std::{fs::File, io::Write};

/// The ELF (executable and linkable format) file for the Succinct RISC-V zkVM.
///
/// This file is generated by running `cargo prove build` inside the `program` directory.
pub const METHOD_ELF: &[u8] = include_bytes!("../../elf/riscv32im-succinct-zkvm-elf");

fn main() {
    let args: Vec<String> = std::env::args().collect();
    let current_dir = std::path::PathBuf::from(args[1].clone());
    // Setup the logger.
    sp1_sdk::utils::setup_logger();

    // Setup the inputs.
    let mut stdin = SP1Stdin::new();

    // INPUT //

    let client = ProverClient::new();
    let (pk, vk) = client.setup(METHOD_ELF);
    let mut proof = client
        .prove(&pk, stdin)
        .compressed()
        .run()
        .expect("failed to generate proof");

    // OUTPUT //

    // Verify the proof.
    client.verify(&proof, &vk).expect("Failed to verify proof");

    let proof_data = bincode::serialize(&proof).expect("Failed to serialize proof");
    std::fs::create_dir_all(&current_dir.join("proof_data/sp1")).expect("Failed to create proof_data/sp1");
    std::fs::write(&current_dir.join("proof_data/sp1/sp1.proof"), &proof_data).expect("Failed to create SP1 proof file");
    std::fs::write(&current_dir.join("../sp1.pub"), &proof.public_values).expect("failed to save SP1 public input");
    std::fs::write(&current_dir.join("../sp1.elf"), &METHOD_ELF).expect("failed to save SP1 elf file");
}

